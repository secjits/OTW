============== Source ==========================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
// gcc's variable reordering fucked things up
// to keep the level in its old style i am 
// making "i" global unti i find a fix 
// -morla 
int i; 

void func(char *b){
	char *blah=b;
	char bok[20];
	//int i=0;
	
	memset(bok, '\0', sizeof(bok));
	for(i=0; blah[i] != '\0'; i++)
		bok[i]=blah[i];

	printf("%s\n",bok);
}

int main(int argc, char **argv){
        
	if(argc > 1)       
		func(argv[1]);
	else    
	printf("%s argument\n", argv[0]);

	return 0;
}
==================================================================
Im gonna try some stuff, see what falls out of the tree

narnia8@narnia:~$ /narnia/narnia8 $(python -c 'print "A"*18')
AAAAAAAAAAAAAAAAAA
narnia8@narnia:~$ /narnia/narnia8 $(python -c 'print "A"*19')
AAAAAAAAAAAAAAAAAAA
narnia8@narnia:~$ /narnia/narnia8 $(python -c 'print "A"*20')
AAAAAAAAAAAAAAAAAAAA����
narnia8@narnia:~$ /narnia/narnia8 $(python -c 'print "A"*25')
AAAAAAAAAAAAAAAAAAAAA���

hmmmm let's GDB this mess
==================================================================
0x080484a7 is location of print in func()

(gdb) b *0x080484a7
Breakpoint 2 at 0x80484a7
(gdb) r $(python -c 'print "A"*20')
Starting program: /narnia/narnia8 $(python -c 'print "A"*20')

Breakpoint 2, 0x080484a7 in func ()
(gdb) x/100x $esp
0xffffd6c0:	0x08048580	0xffffd6d8	0x00000014	0xf7e55fe3
0xffffd6d0:	0x00000000	0x002c307d	0x41414141	0x41414141
0xffffd6e0:	0x41414141	0x41414141	0x41414141	0xffffd8e3
0xffffd6f0:	0x00000002	0xffffd7b4	0xffffd718	0x080484cd
0xffffd700:	0xffffd8e3	0xf7ffd000	0x080484fb	0xf7fcc000
0xffffd710:	0x080484f0	0x00000000	0x00000000	0xf7e3cad3
0xffffd720:	0x00000002	0xffffd7b4	0xffffd7c0	0xf7feacca
0xffffd730:	0x00000002	0xffffd7b4	0xffffd754	0x080497a4
0xffffd740:	0x0804820c	0xf7fcc000	0x00000000	0x00000000
0xffffd750:	0x00000000	0x06e966f9	0x3ed202e9	0x00000000
0xffffd760:	0x00000000	0x00000000	0x00000002	0x08048330
0xffffd770:	0x00000000	0xf7ff04c0	0xf7e3c9e9	0xf7ffd000
0xffffd780:	0x00000002	0x08048330	0x00000000	0x08048351
0xffffd790:	0x080484ae	0x00000002	0xffffd7b4	0x080484f0
0xffffd7a0:	0x08048560	0xf7feb160	0xffffd7ac	0x0000001c
0xffffd7b0:	0x00000002	0xffffd8d3	0xffffd8e3	0x00000000
0xffffd7c0:	0xffffd8f8	0xffffd908	0xffffd91c	0xffffd93b
0xffffd7d0:	0xffffd94e	0xffffd957	0xffffd964	0xffffde85
0xffffd7e0:	0xffffde90	0xffffde9c	0xffffdefa	0xffffdf11
0xffffd7f0:	0xffffdf20	0xffffdf32	0xffffdf43	0xffffdf4c
0xffffd800:	0xffffdf5f	0xffffdf67	0xffffdf77	0xffffdfa6
0xffffd810:	0xffffdfc6	0x00000000	0x00000020	0xf7fdbbe0
0xffffd820:	0x00000021	0xf7fdb000	0x00000010	0x178bfbff
0xffffd830:	0x00000006	0x00001000	0x00000011	0x00000064
0xffffd840:	0x00000003	0x08048034	0x00000004	0x00000020

(gdb) r $(python -c 'print "A"*25')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
yStarting program: /narnia/narnia8 $(python -c 'print "A"*25')

Breakpoint 2, 0x080484a7 in func ()
(gdb) x/100x $esp
0xffffd6b0:	0x08048580	0xffffd6c8	0x00000014	0xf7e55fe3
0xffffd6c0:	0x00000000	0x002c307d	0x41414141	0x41414141
0xffffd6d0:	0x41414141	0x41414141	0x41414141	0xffffd841
0xffffd6e0:	0x00000002	0xffffd7a4	0xffffd708	0x080484cd
0xffffd6f0:	0xffffd8de	0xf7ffd000	0x080484fb	0xf7fcc000
0xffffd700:	0x080484f0	0x00000000	0x00000000	0xf7e3cad3
0xffffd710:	0x00000002	0xffffd7a4	0xffffd7b0	0xf7feacca
0xffffd720:	0x00000002	0xffffd7a4	0xffffd744	0x080497a4
0xffffd730:	0x0804820c	0xf7fcc000	0x00000000	0x00000000
0xffffd740:	0x00000000	0xe61fb6f7	0xde24b2e7	0x00000000
0xffffd750:	0x00000000	0x00000000	0x00000002	0x08048330
0xffffd760:	0x00000000	0xf7ff04c0	0xf7e3c9e9	0xf7ffd000
0xffffd770:	0x00000002	0x08048330	0x00000000	0x08048351
0xffffd780:	0x080484ae	0x00000002	0xffffd7a4	0x080484f0
0xffffd790:	0x08048560	0xf7feb160	0xffffd79c	0x0000001c
0xffffd7a0:	0x00000002	0xffffd8ce	0xffffd8de	0x00000000
0xffffd7b0:	0xffffd8f8	0xffffd908	0xffffd91c	0xffffd93b
0xffffd7c0:	0xffffd94e	0xffffd957	0xffffd964	0xffffde85
0xffffd7d0:	0xffffde90	0xffffde9c	0xffffdefa	0xffffdf11
0xffffd7e0:	0xffffdf20	0xffffdf32	0xffffdf43	0xffffdf4c
0xffffd7f0:	0xffffdf5f	0xffffdf67	0xffffdf77	0xffffdfa6
0xffffd800:	0xffffdfc6	0x00000000	0x00000020	0xf7fdbbe0
0xffffd810:	0x00000021	0xf7fdb000	0x00000010	0x178bfbff
0xffffd820:	0x00000006	0x00001000	0x00000011	0x00000064
0xffffd830:	0x00000003	0x08048034	0x00000004	0x00000020

hmmm....
So we can overflow one byte at 0xffffd6dc... I wonder what I can do with this...

(gdb) r $(python -c 'print "A" *20')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia8 $(python -c 'print "A" *20')

Breakpoint 1, 0x080484a7 in func ()
(gdb) x/160x $esp
0xffffd6c0:	0x08048580	0xffffd6d8	0x00000014	0xf7e55fe3
0xffffd6d0:	0x00000000	0x002c307d	0x41414141	0x41414141
0xffffd6e0:	0x41414141	0x41414141	0x41414141	0xffffd8e3
0xffffd6f0:	0x00000002	0xffffd7b4	0xffffd718	0x080484cd
0xffffd700:	0xffffd8e3	0xf7ffd000	0x080484fb	0xf7fcc000
0xffffd710:	0x080484f0	0x00000000	0x00000000	0xf7e3cad3
0xffffd720:	0x00000002	0xffffd7b4	0xffffd7c0	0xf7feacca
0xffffd730:	0x00000002	0xffffd7b4	0xffffd754	0x080497a4
0xffffd740:	0x0804820c	0xf7fcc000	0x00000000	0x00000000
0xffffd750:	0x00000000	0xab83c882	0x93b8ac92	0x00000000
0xffffd760:	0x00000000	0x00000000	0x00000002	0x08048330
0xffffd770:	0x00000000	0xf7ff04c0	0xf7e3c9e9	0xf7ffd000
0xffffd780:	0x00000002	0x08048330	0x00000000	0x08048351
0xffffd790:	0x080484ae	0x00000002	0xffffd7b4	0x080484f0
0xffffd7a0:	0x08048560	0xf7feb160	0xffffd7ac	0x0000001c
0xffffd7b0:	0x00000002	0xffffd8d3	0xffffd8e3	0x00000000
0xffffd7c0:	0xffffd8f8	0xffffd908	0xffffd91c	0xffffd93b
0xffffd7d0:	0xffffd94e	0xffffd957	0xffffd964	0xffffde85
0xffffd7e0:	0xffffde90	0xffffde9c	0xffffdefa	0xffffdf11
0xffffd7f0:	0xffffdf20	0xffffdf32	0xffffdf43	0xffffdf4c
0xffffd800:	0xffffdf5f	0xffffdf67	0xffffdf77	0xffffdfa6
0xffffd810:	0xffffdfc6	0x00000000	0x00000020	0xf7fdbbe0
0xffffd820:	0x00000021	0xf7fdb000	0x00000010	0x178bfbff
0xffffd830:	0x00000006	0x00001000	0x00000011	0x00000064
0xffffd840:	0x00000003	0x08048034	0x00000004	0x00000020
0xffffd850:	0x00000005	0x00000008	0x00000007	0xf7fdc000
0xffffd860:	0x00000008	0x00000000	0x00000009	0x08048330
0xffffd870:	0x0000000b	0x000036b8	0x0000000c	0x000036b8
0xffffd880:	0x0000000d	0x000036b8	0x0000000e	0x000036b8
0xffffd890:	0x00000017	0x00000000	0x00000019	0xffffd8bb
0xffffd8a0:	0x0000001f	0xffffdfe8	0x0000000f	0xffffd8cb
0xffffd8b0:	0x00000000	0x00000000	0x38000000	0xc452a49c
0xffffd8c0:	0x71beaa16	0x1d8352e4	0x69f69369	0x00363836
0xffffd8d0:	0x2f000000	0x6e72616e	0x6e2f6169	0x696e7261
0xffffd8e0:	0x41003861	0x41414141	0x41414141	0x41414141
0xffffd8f0:	0x41414141	0x00414141	0x4c454853	0x622f3d4c
0xffffd900:	0x622f6e69	0x00687361	0x4d524554	0x6574783d
0xffffd910:	0x322d6d72	0x6f633635	0x00726f6c	0x5f485353
0xffffd920:	0x45494c43	0x313d544e	0x312e3237	0x2e302e38
0xffffd930:	0x34332031	0x20303133	0x53003232	0x545f4853

Ok so *0xffffd6ec is 0xffffd8e3, which is the address of the As in the previous stack frame... interesting
